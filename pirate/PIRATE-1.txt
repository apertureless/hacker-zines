 
         *******************************************************
         **                                  _______   ____   **
         **     IIIII    I    IIIII    IIIII    I     I       **
         **     I  II    I    I  II    I   I    I     I____   **
         **     III      I    III      IIIII    I     I       **
         **     I        I    I  I     I   I    I     I       **
         **     I        I    I   I    I   I    I     I____   **
         **keepin' the dream alive                            **
         *******************************************************
 
               -=>   VOLUME 1, ISSUE 1, June, 1989   <=-
 
                           **** WELCOME ****
 
              To the first issue of -=* PIRATE *=-!
Special thanks for getting this issue out go to:
  Jedi
  Spanky
  Jim Richards
  Hatchet Molly
  Chris Robin
  Maxx Cougar
  Taran King
  Knight Lightning
  Flint
  The Man
 
Any comments, or if you want to contribute, most of us can
be reached at one of the following boards:
  GREAT ESCAPE    (312) 535-2761   >>> PIRATE HOME BOARD
  SYCAMORE ELITE  (815) 895-5733
  THE UNDERGROUND (201) 957-1976
  PACIFIC ALLIANCE (818) 280-5710
  BITNET ADDRESS (Chris Robin): TK0EEE1@NIU.BITNET
 
     +++++++++++++++++++++++++++++++++++++++++++++++++++++
 
Our goal is to share knowledge, gossip, information, and tips
for warez hobbyists.
 
                         TABLE OF CONTENTS
 
*. What's a Pirate?
*. Pirate Do's and Don'ts
*. Pirate tips
*. Why Software ownership is bad for society
*. Copyright Law
*. Computer laws in Wisconsin
*. Editorial: Big Brother in the Computer Room?
*. Sysop's corner
*. What's hot, what's not
*. Wants and Needs
*. Board Review of the Month: THE GREAT ESCAPE
*. A few decent boards
 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * * * *  SO YOU WANT TO BE A PIRATE?  * * * *
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
What's a pirate?  COMPUTER PIRACY is copying and
distribution of copyright software (warez).  Pirates are
hobbyists who enjoy collecting and playing with the latest
programs.  Most pirates enjoy collecting warez, getting them
running, and then generally archive them, or store them away.  A
PIRATE IS NOT A BOOTLEGGER.  Bootleggers are to piracy what a
chop-shop is to a home auto mechanic.  Bootleggers are people who
DEAL stolen merchandise for personal gain.  Bootleggers are
crooks.  They sell stolen goods.  Pirates are not crooks, and
most pirates consider bootleggers to be lower life forms than
child molesters.
 
Pirates SHARE warez to learn, trade information, and have fun!
But, being a pirate is more than swapping warez.  It's a life
style and a passion. The office worker or class mate who brings
in a disk with a few files is not necessarily a pirate any more
than a friend laying a copy of the lastest Depeche Mode album on
you is a pirate.  The *TRUE* pirate is plugged into a larger
group of people who share similar interests in warez. This is
usually done through Bulletin Board Systems (BBSs), and the
rule of thumb is "you gotta give a little to get a little...ya
gets back what ya gives." Pirates are NOT freeloaders, and only
lamerz think they get something for nothing.
 
A recent estimate in the Chicago Tribune (March 25, p. VII: 4)
indicated that computer manufacturers estimate the cost of
computer piracy at over $4 billion annually.  This is absurd, of
course. Businesses rarely pirate warez, because the penalties for
discovery do not make it cost effective.  Individuals who pirate
are rarely going to spend several thousand dollars a year for
warez they generally have little practical use for, and there's a
lot of evidence that pirates spend more money on warez they
probably don't need.  In fact, pirates may be one of the best
forms of advertising for quality products, because sharing allows
a shop-around method for buying warez. Most of us buy a program
for the documents and the support, but why invest in four or five
similar programs if we aren't sure which best suits our needs?
Nah, pirates aren't freeloaders.
 
Is piracy unethical? It may be illegal, although most states have
laws providing a grey area between archiving (storing) and use.
But, is it UNETHICAL? We think not. We challenge the claim that
pirates cost software manufactures any lost revenue, and will
argue that they spread the word for high quality products.  The
average person cannot afford the mega-bucks needed to buy Dbase-4
and Foxbase, and would do without either if forced to buy. But,
by testing out both, we are able to inform those who WILL buy
which is better. So, we spread computer literacy, indirectly
encourage improvements, and keep the market alive.  Pirates hurt
no one, take money from nobody's pocket, and contribute far more
to the computer industry than they are willing to acknowledge.
 
How many of us have had mega-fone bills in a month?  The
tele-comm folks must love pirates. No, pirates aren't cheap
skates. The fun of finding an obscure program for somebody, the
thrill of cracking a program, the race to see who can be the
first to upload the latest version--these are the lure of piracy.
We are collections of information.  Unlike those who would keep
computer literacy to the affluent few, we make it more readily
available to the masses.
 
So what's a pirate? A pirate is somebody who believes that
information belongs to the people. Just as a book can be zeroxed
or placed in a library to be shared, pirates provide a type of
library service.  The experienced pirate even acts as a tutor in
helping those who may have purchased warez. We don't bitch about
serving as unpaid consultants to the computer industry, and we
don't wouldn't think to request payment for our services. By
providing a user-friendly network of information sharers, we
increase computer literacy which is in everybody's mutual
interests.
 
The software industry is unlikely to acknowledge (or even
recognize) the contributions of pirates to their enterprise, and
continue to view us as "the enemy!" Pirates are not represented
in legislation and have no strong constituency to challenge
misrepresentation. PIRATE NEWSLETTER is intended to break down
the power of media to define us as crooks and outcasts and bring
us together. By keeping information open and flowing and not
under the control of a privileged few, we are enhancing democracy
and freedom of the market place.
 
PIRATES ARE FREEDOM FIGHTERS KEEPNG THE DREAM ALIVE!
 
                           >> *END* <<
 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
              * * * * PIRATE DOs AND DON'Ts * * **
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
If you want to get on an elite board and stay there, there's
some things you should do, and some things that are taboo.
Here's a partial list:
 
-----
DO:
-----
 
1.  DO make copies from original disks, and be sure to put the
    version of the product in the description.
2.  DO put "read me" tips in the first disk if there's a trick
    to getting a program working.
3.  DO put up complete files, NOT partial files, and label
    them as they are on the disk.
4.  DO put in the file description whether the program is
    cracked or uncracked
5.  DO read the message section of the boards, and contribute
    when you can. Don't be afraid to ask dumb questions.
6.  DO make sure you have sufficient space on your hard drive
    or disks when downloading a large file.
    This may sound silly, but it's not unusual especially for
    novices to forget space and botch a download.
7.  DO make sure to describe whether a program you uploaded
    has special requirements (mouse, math co-processor).
8.  DO keep up on protocols...use the fastest available.
    Using Xmodem is a sure sign of a lamer.
9.  DO read the bulletins and check to be sure the board
    doesn't already have a copy of what you are uploading.
10. DO use zip comments to specify what a disk is.
                        ----------------
------
DONT:
-----
1.  DON'T whine and swear at the sysop. You get on a board
    and get more access as you prove yourself deserving.
2.  DON'T upload .gif files and other programs that are a
    dime a dozen and of little use. Upload what you would like
    to receive.
3.  DON'T start changing handles for every board. Most BBSers
    are known by one handle, and change only if there is a good
    reason to.
4.  DON'T phreak to a pirate board. It draws attention to the
    board and makes life miserable for everybody.
5.  DON'T logoff prematurely. Use the board's logoff command.
6.  DON'T change the names of a file just to get upload credit.
    This is a sure way to get kicked off any board.
7.  DON'T start flaming other users. Pirate boards are SHARE
    boards, and most users would rather read some good tips
    and not engage in petty arguments.
8.  DON'T upload faulty files or incomplete files. Be sure
    it's all there. If it isn't, at least indicate that in the
    file description.
9.  DON'T blame the sysop for faulty files until you have
    at least tried leaving messages for help.
10. DON'T log on just to look around...upload or post something.
    If you don't SHARE, you're taking time away from other
    users.
 
                           >> *END* <<
 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                   * * * * PIRATE TIPS * * * *
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
------------
DOCUMENTS:
------------
 
Some programs require dox for full use their capabilities.
There are document files for some programs floating around,
and if you have any, upload and spread them to your favorite
boards or use e-mail (bitnet) to get them to friends.
QUE publishes a variety of texts that in most cases are more
helpful than the original documentation. These include tips on
most LOTUS program, dBase-4, Rbase, Q&A, Excell, Wordperfect,
Word Star, Paradox, DisplayWrite, Microsoft Word, SuperCalc,
PageMaker, and many, many more. Most large bookstores carry these
(or will order them), or you can call QUE's order line at
1-800-428-5331.
 
------------------
UPLOADING FILES:
------------------
 
One of the biggest hassles is downloading a file only to find
that it doesn't work or that not all files are included.  When
you upload a program, BE SURE TO use a diskcopy command that
copies the ENTIRE program, including subdir, label each disk (or
file) as it appears on the original.  If a program is snatched or
if there are any problems, you should specify when uploading. USE
THE ZIP COMMENT (pkzip -z /filename) command to label each file.
So, if you upload a 5 disk set, and if the first disk from the
original files is the program files, be sure this is the first
disk you zip and upload.  Label it something like MYFILE-1 and in
the zip command label it as it is labeled on the original.
NEVER(!!) install a program, especially a large on such as ALDUS,
and then just zip up the directory into a single multi-meg file
for uploading.  REMEMBER: Not all users can handle files over
360 K, so keep files to a manageable size!
 
-----------------
UNWORKABLE FILES
-----------------
 
What do you do if you get a program that doesn't work? Check
back with the sysop of the board where you obtained it.
Most sysops appreciate being told of problems---if you have
a problem, somebody else will likely have the same problem, and
it doesn't do the sysop a favor to keep silent. Sometimes it's
just a matter of finding the right trick, but if it's a bad
program, it should be taken off the board ASAP! But don't bitch
at the sysop--Nothing's worse than a whiney user. If you
find there's a trick to getting a program working, leave a
message on the board. Remember the motto: ONE FOR ALL, and all
that, and SHARING is the pirate credo!!
 
                           >> *END* <<
 
 (The following is reprinted from BITNET unedited ((eds.)).
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * * * Why Software Ownership is bad for Society * * *
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
Talk given by Richard Stallman at Univ. of Texas, Feb. 1987.
Square brackets contain comments and clarifications that were not
said in the original talk.
 
Copyright @copyright%% 1987, Free Software Foundation, Inc.
 
This is an unedited transcript of an informal talk.  Verbatim
copying and redistribution is permitted; alteration is not.
 
If you are interested in helping to edit this to be more suitable
for publication, please contact the Free Software Foundation:
675 Mass Ave, Cambridge, MA 02139; or send email to
gnu@prep.ai.mit.edu.
 
The field of software is a fairly new one.  About twenty years
ago, people started doing lots of programming.  There was no
clear basis in tradition for whether software should be
considered property or not.  There were several possible
traditions you could consider extending by analogy to the area of
software, no one of which was inevitable, or necessarily more
right than the others.  One of them was the area of mathematics.
Some people believe that a program is like a mathematical
formula, and the tradition for mathematical formulas is that they
couldn't be property.  Another thing that programs are like is
recipes.  In fact, of all the things that people encounter in
daily life, the recipe is the one that's most like a program.
It's directions for getting something useful done.  And recipes,
also, by our traditions cannot be property.  There was a third
thing, and that was literature.  As it happens, literature
traditionally @emph%could% be property.  Programs have something
in common with all three of these things.  They don't have more,
particularly, in common with literature than they do with
mathematics or recipes, but the decision was made to treat them
like literature because the people who had the most to gain from
that particular decision were allowed to decide.
 
But this decision was not good for society as a whole.  It's
incredibly destructive, and it feeds an overall destructive
tendency in this society which we can see in every area.  And
that's why, having observed the results, I came to the conclusion
that it was unacceptable, that software @emph%cannot% be
property, and that I would dedicate my career to bringing that
about.
 
If we look at the traditional forms of intellectual property, we
can see they were all designed to fit into niches where they
could exist without doing great harm to society.  These niches
were often created by the technology that existed at the time.
For example, consider the area of books, for which copyright was
invented.  At the time, books could only be copied by mass
production.  Earlier, books were copied one at a time, by hand,
and at that time there was no idea of copyright.  In fact, people
didn't even have the @emph%concept% of strictly distinguishing
their original book from a non-original one.  It was a continuum.
They recognized that some writers wrote more new things into
their books, while they copied passages [from other books], or
they might just be copying entire books.  All of these things
were legitimate, useful activities, though useful in different
ways.  But when the printing press was invented, it suddenly
became for all intents and purposes impossible to copy a book by
hand.  Not that it was any harder than it had been before, but by
comparison with making a copy on a printing press, it was so
ridiculously impractical that no one would want to do it.  The
situation where books were made by mass production lent itself to
copyright in the sense that copyright became a restriction on one
particular kind of industry---a form of industrial regulation.
It didn't take away the rights of the reading public in any way,
because members of the reading public couldn't copy books anyway.
They didn't own printing presses, so it was effectively
impossible for them to copy books.  But this niche was created by
a particular technology, and changing technology can make it go
away again.  The technology of computer programs has never been
like that.
 
[I have since learned that people did copy books by hand to a
significant extent after the printing press was developed.  What
I said was true in recent times, but in England in the 1500's
(and perhaps later) government-enforced featherbedding among
printers made printed books fairly expensive; as a result, poor
people might more easily afford the time to copy a book than the
price of the book.  But these people were not prosecuted for
copying or told it was wrong.  Copyright was applied only to
authors and publishers.  It was treated as an industrial
regulation.]
 
If we look, for example, at patents, we find something that was
specifically set up to benefit the @emph%public%, not the
inventor.  It was set up to encourage inventors to disclose what
they had invented, and to give them monopolies that were limited
in time, to a time that short compared to the useful life of any
invention then.  It's no longer short, compared to the useful
life of any invention today.  In fact, core memory was already
pretty much obsolete when its patent ran out.  That's a very
famous patent, and I suspect that a lot of other patents have the
same results.  But remember, the purpose of setting up patents
was to benefit mainly society as a whole, by encouraging
disclosure and thus making it possible for people to build on
each others' work.  You won't find a motive like that among
people who advocate intellectual property today.
 
In the time that I've worked as a programmer, I've watched things
change from a situation where people generally shared work and
generally used work that had been done in whatever way was
useful, to one in which is nearly impossible to utilize work that
other people have done, where people feel uncomfortably cynical.
Constantly, a person will describe a great piece he's doing
that's so exciting, you ask him %%will I be able to use it?'',
and his face falls, and he says, no, you probably won't be, and
he realizes that he's doing something wrong, but he perhaps
doesn't have the commitment to doing right that would be required
to decide that he wasn't going to do it any more.  But that kind
of thing [doing what they know is wrong and being too scared to
stop] demoralizes people.
 
If we look at the two arguments that are advanced most often
toward intellectual property in software, they are one, the
emotional argument, and two, the economic argument.  The
emotional argument goes something like %%I put my sweat, and my
heart, into this program.  It's my soul; it comes from @emph%me%,
it's @emph%mine!%.''  Well, it's sort of fishy that most of these
people would then go sell it to a company.  And what ever
happened to egoless programming, anyway?  So I don't really think
that that argument is worth refuting any harder than that.  It's
a feeling that people can cultivate when it suits them, not one
that is inevitable.  By comparison, consider all the great
artists and artisans of medieval times, who usually didn't even
sign their names.  They didn't consider that it was relevant who
had done the work, only that it existed; and this was the way
people thought for hundreds of years.
 
The economic argument goes something like, %%I want to get rich
(except that I'll call that %make a living'), and if you don't
allow me to get rich by programming, then I won't program.  And
then you'll be screwed---so there!''  Well, I'll explain later
why I think we don't have to go along with that kind of
blackmail.  But first I want to address the claim [I should have
said, the implicit assumption] that society actually benefits
from proprietary software development.
 
The first problem with that argument is that it's comparing the
wrong two things [owned software vs no software].  Certainly,
software development is useful.  But to link the development of
the software with subsequent ownership and prevention of use is
to beg the question.  The question is, %%Should software
development be linked with some ability to stop people from using
it?'', and in order to decide this, we have to judge the effects
of each of those two activities independently.  What I intend to
show is that the effects of @emph%ownership%, by itself, are very
destructive, and therefore, if you want to encourage the
development which is useful, we should not connect it with
something destructive [like ownership].  And I'll go on to
explain other ways in which this [encouragement] can easily be
done.
 
Let's look at the overall effects of software ownership.
Consider that we have a program that has been developed, and now
it either can be free, or it can be proprietary.  There are three
different levels of material harm that come from making it
proprietary.  And with each of these, there's a concomitant form
of spiritual harm.  By %%spiritual'' I mean the effect on
people's feelings, attitudes, and thoughts of the actions that
they take.  These changes in people's ways of thinking will then
have a further effect on their actions in the future.
 
The first level is the level of simple use of a program.  If a
program is successfully made proprietary, that will cause fewer
people to use it.  This doesn't make it any less work, however.
Here is a crucial difference between programs and cars, chairs,
or sandwiches.  That is, once there's one of them, @emph%anyone%
can essentially snap his fingers and have as many more copies of
the thing as are wanted.  This isn't true for material objects,
which are conserved, and which have to be built in the same way
that the first one was built.  With material objects, it's not
necessarily destructive to have a price on them because that
means if people decide to buy fewer of them, you can @emph%make%
fewer of them and use fewer resources and spend less of your
time.  You might say, %%Well, these people only want to pay for
ten of these, so I'll build ten and I'll spend the rest of the
day going fishing.''  But that's not relevant when the question
is whether @emph%they% should build some more @emph%themselves%,
which is what users will do with free programs.  So we find that
there's no overall benefit which comes---no non-selfish,
non-obstructive reason to want to put a price on the use---why
have a disincentive to use something which really costs nothing
to make?  A great spiritual harm goes along with this waste,
because of the way it's worked.
 
The spiritual harm comes from the nondisclosure agreements and
licenses that people sign, because each buyer is asked to betray
his neighbors.  If you want to use a program and your neighbor
wants to use the program, the Golden Rule says that you should
want @emph%both% of you to get that program.  You shouldn't aim
for a solution where you get it and the other people don't, if
you want to be a good citizen, that is.  And the nondisclosure
agreement essentially says %%I promise to be a bad citizen---I
promise to say %To hell with my neighbors!'  To hell with
everyone!  Just give @emph%me% a copy!''.  And you can see the
spiritual effect that has on the community you live in.
 
A lot of people unconsciously recognize this and that's why the
decide to share programs anyway.  But they feel somewhat guilty
because they haven't reasoned it out carefully and decided that
the nondisclosure agreements are illegitimate morally.  They know
that they must break those agreements in order to be still
friends with their friends, but they still think that the
agreements are valid also, and so they feel @emph%ashamed% of
being friends with their friends.  And that's also a kind of
spiritual harm.  I say that people shouldn't @emph%have% to
explain in a slightly embarrassed tone of voice that they're
%%pirates''.  They shouldn't @emph%think% of themselves as
pirates.  They shouldn't use that particular propoganda term.
 
The second level of material harm is at the level of
@emph%adapting% programs.  Most commercially available software
isn't fully available, even commercially.  It's available for you
to take it or leave it, but it's not available for you to change.
But changing programs is an incredibly useful thing, and if that
is prevented, it's a great harm.  I have a friend who told me
that she worked as a programmer in a bank for about six months,
writing a program that was pretty close to something that was
commercially available, and she thought that if she could have
gotten source code for that commercially available program, it
would have taken much less than six months to adapt it to their
needs.  But they couldn't get the source code, so she had to do a
lot of make-work, a lot of work that you would include in the GNP
but was really totally useless.  And I'm sure you've all had the
experience as programmers of being frustrated because there was a
program you wanted to change and couldn't.
 
We can consider what it would be like if recipes were hoarded in
the same fashion as software.  You'd say, %%How do I change this
recipe to put in less salt?'', and the great chef says, %%How
dare you insult my recipe, the child of my brain, by trying to
tamper with it?  You don't have the judgement to tamper with my
recipe and make it work right!''.  %%But my doctor says I'm not
supposed to eat salt!  What do I do?''.
 
The spiritual harm that comes from this is to the spirit of
self-reliance, which used to be greatly valued in this country.
If you can't be self-reliant, then the landscape that you live in
is frozen under someone else's control and you can't change it.
That leads to a demoralized attitude like %%Well, yeah, this
system isn't really what we want, but it's hopeless to think of
trying to change it, so we'll just have to live with it and
suffer and suffer and suffer.''  And nothing can kill morale of
programmers like that.
 
I remember even at MIT we had an example like that, and I
remember how it demoralized people.  Our first graphics printer
was the XGP, which many of you are probably lucky enough not to
have heard of.  But that was available ten years ago or more.
And all the software for that was written at MIT, and we could
change it.  We put in lots of nice features, such as it would
send you a message when your document had actually been printed;
and it would a send you a message if you had anything queued and
there was a paper jam; and many other nice features.  Then later
we got something called the Dover, which was another gift from
Xerox.  But there, the software was proprietary, and it ran in a
separate computer that served as the spooler, and we couldn't add
any of those features.  So when you got a message that said
%%your document has been sent'', you don't know if it's been
printed, you won't find out when it's been printed, and no one
would get informed when there was a paper jam, so it might sit
there with no one fixing it for an hour.  And we all knew that we
were capable of fixing these things, probably as well as the
original authors were, but somebody found it useful to sabotage
us.  That was a constant source of frustration.
 
The third level of material harm is the level of software
development.  Software development used to go on by a sort of
evolutionary process, where a person would take a program and
rewrite parts of it for one new feature, and then another person
would rewrite parts to put another new feature in; this could go
on over twenty years.  The final program might have many features
that the original one didn't have, but you might still see a few
lines of code that you could recognize by their style as having
been there from ten years before without ever being changed.  And
one of the main goals of intellectual property is to prevent this
kind of evolution, to try to make it impossible for you to throw
together a program quickly and easily by cannibalizing things
that are already written.  In any kind of intellectual field,
progress is built by standing on the shoulders of others.  That's
what's no longer allowed---you can only stand on the shoulders of
the other people in @emph%your company% nowadays.
 
And the spirit that's harmed by this material harm is the spirit
of scientific cooperation, which used to be so strong that
scientists would cooperate with each other even when they were in
countries that were at war.  Nationalism wasn't able to destroy
scientific cooperation, but greed has.  Nowadays, people don't
publish enough in their papers to be able to replicate anything.
They publish only enough for you to be able to gaze in amazement
at how much they had been able to do.
 
  [Tape counter 213-227: someone describes the example of
  Karmarkar's algorithm, an efficient algorithm for linear
  programming that AT&T is keeping secret.]
 
So now that I have shown all these reasons why ownership of
software is bad for society, I think the conclusion that we
shouldn't allow or recognize in any way a concept such as
ownership of programs.  We should say that programs are
@emph%not% property, and if we want to encourage software
development, we should encourage it in another way.
 
There are many fields in which no one sees a way to get rich by
owning something and no one expects to, but there are still lots
of people eager to work in the field.  They compete bitterly,
though more sadly than bitterly, I guess, for the few funded
positions available, none of which is funded very much.
 
Suddenly, however, when it becomes possible by hoarding
information to get rich, you find people saying that no one will
work in the field if they can't get rich.  Well, it may be true
at that moment, but it's a consequence of the expectation that
you @emph%can% get rich.  Therefore, we shouldn't assume that it
has to be true in any particular field.  It's essentially a
coincidence that that field makes it possible to get rich by
hoarding, and if we were to take away the possibility of getting
rich by hoarding, then after a while, when the people had
intellectually readjusted, they would once again be eager to work
in the field for the joy of working in it, and they would ask us
only to provide them a pittance to live on.  And these pittances
can be provided at universities which right now are proprietary
software sellers.  They can be supported by hardware
manufacturers which have to do software development anyway, and
twenty years ago did free software development.  They can be
supported by government contracts and grants, which actually
support a lot of proprietary software development today.  A large
amount of software development is supported one way or another by
the military, some of which may have to do with building weapons,
but not all of it; but it's proprietary anyway, most of the time.
 
Some people I know right now have a contract to write a
proprietary, improved version of a free program that supports
TCP/IP on IBM PC's.  And with this contract, they could make a
living just as well writing free software, but of course they're
not going to; they want to be able to clean up afterwards.  And
you all know of people who get research grants to develop
something at a university, and then they make the unfinished
version free, and go on to start companies to sell something with
the last few finishing touches, so that you'd actually want to
use it.
 
Our whole world, everywhere we look, all forms of good will to
your neighbor are being undermined by the search for ways to
obstruct for profit.  Fifty years ago, various people in the
Mafia would go around to stores in the neighborhood and say %%You
have a nice building there; it would be a shame, wouldn't it, if
it burned down, and there have been a lot of fires around here
lately.  I think you need some protection''.  And this was called
the %%protection racket''.  Now we have people going to computer
users and saying, %%You've got some nice software there, but I
paid those congressmen to say it's illegal for you to have it.  A
lot of people have been going to jail around here lately for
that.  You wouldn't want to go to jail, would you?  I think you
need to pay me some money.''  And this is the software protection
racket.
 
They say that they're providing a useful service to the public,
that they are software publishers, or software stores.  But these
functions only appear to be necessary because of the restrictions
they have managed to place on us.  You wouldn't need a software
store if software were free.  You'd only need the public library,
which would have a computer with copies that you could download,
or copy onto floppies or tapes, of one copy of all the programs
that you'd want.  And it wouldn't cost very much---nothing,
compared with what software stores cost to run, to make this
thing go.
 
But the people in the Mafia fifty years ago didn't want to admit
to themselves---they wanted to pretend to themselves that there
was something legitimate about what they were doing, and that's
why they phrased it in terms of protection.  They didn't bluntly
say %%I'll burn your store down if you don't pay me.''  So, too,
the software publishers like to pretend, and speak as if they
were doing something useful, instead of simply saying %%if you
use that program, I'll send some cops after you if you don't pay
me.''
 
    [Unintelligible question, apparently about if there are
    sufficient programmers to write software w/o monopolies.
    Ans:]
 
Well how do you know they're not sufficient?  So much of software
work today is wasted by duplication that's done only for
proprietary reasons, we could probably get as much software
delivered with half the programmers if we didn't have this form
of featherbedding.  In fact, it's sort of funny to look at the
quest for software productivity.  There are two meanings you
could have for software productivity.  You can look at the
software productivity of the industry as a whole, or you could
ask about the productivity of a particular company.  There's a
lot of work being put into increasing the software productivity
of particular companies one by one, but the best way to increase
the productivity of the whole industry is to eliminate the
artificial obstruction.  And that would increase productivity far
more than anything people are trying to do now.  But they don't
want that, because what they want is productivity of my company,
not productivity that actually benefits society.  But they use
that language to try make people overlook the difference.
 
It's an interesting thing about how language is used for
propoganda.  By choosing particular words, you don't @emph%force%
people to think a certain way, but you can strongly suggest
certain avenues of thought.  By using a certain word for two
things, you can bias people without their knowing it towards
seeing the similarities and underestimating the differences.  And
this is one of the reasons why software hoarders use the terms
%%property rights'' and %%ownership'' and %%theft'' while I use
the term %%software hoarding''.  Software hoarding is my name for
the crime of trying to prevent someone else from sharing a
program with a third party.  And that's the same thing that's
going on with "software productivity".  Software productivity has
two meanings, about which you would say different things, but it
takes a critical eye to realize that there are two meanings.  If
you don't look critically, you might say %%Ah!  Improving
productivity---that's got to be what we need!  Obviously, what we
want to do to make society work better is improve
productivity!''.  You wouldn't guess that they're talking about a
very narrow kind of productivity, and excluding something that
comes into the overall productivity, an area where they
themselves are deliberately making things worse.
 
What can we say, I guess, about the overall effect of technology
on these kinds of restrictions?  I've explained how copyright
pretty much made sense.  It was only a small restriction on
people's freedom in the technological situation in which it was
invented.  But now we've seen a change in technology which makes
copying things one at a time a feasible way to copy, and anyone
can do it as well as anyone else, which changes the fundamental
situation that made copyright legitimate and caused it to become
illegitimate.  Right now we've seen half of that transformation
in the copying of books.  You can xerox a book now, but only for
very expensive books would you want to, because what you get is
not as nice as a bound book, and it takes you more work to do it.
 
It fundamentally does cost more (now) to make a book by xeroxing
than it does on a printing press.  And it costs the individual
more, so we've only seen a few situations in which people wanted
to make any number of copies of a book by xeroxing.  But that's
just a transient state, because soon we're going to have
wonderful computer printers, and we're going to have
digitizers---scanners, and it will be possible to scan any book
quickly, you'll have a robot to turn the pages, and have it on
your disk, and send it across a network to be printed out into a
beautifully bound copy, and at that time, book publishers will be
just as useless to society as software publishers are.  And at
that time, the move that's already afoot to eliminate the public
libraries or tax them with royalties, may essentially complete
itself.  You may be unable to get a copy of a book without
signing a license of some sort.
 
In general, the entire thrust of information technology is that
information is completely interconvertible.  Any form can be
changed into any form.  Nothing is ever lost.  And also, the
whole idea of the computer is that it's a universal machine.
It's a machine that can be programmed to simulate any other
machine.  Why is this better than building a specific machine?
It's because you can change the program, because you can copy the
program, load in new programs.  The ability to copy and the
ability to change a program are the entire basis for the
usefulness of the computer.  And those are precisely what the
software owners don't want the public to be able to do.  Software
owners want to reserve all the benefits of computer technology to
themselves, with only a %%trickle down'' to the public.  I say
the public should not allow this.  If we call the bluff of the
programmers or the programming investors, they won't have as many
Porsches and they won't eat as much sushi.  But once they are
willing to go along with that, they'll find that there are other
ways of organizing businesses that are less profitable, but
enough for a good number of programmers to make a living
nonetheless.  And we'll take a great step forward toward a world
in which it's much @emph%easier% to make a living, because there
won't be as obstruction going on, making us do unnecessary work.
And we'll see all sorts of indirect effects, because society is
pretty well linked.
 
Software hoarding is one form that the tendency to obstruct
society for profit takes; one that pertains to our field, but
that actually exists in some other fields as well, to greater or
lesser extents.  And the more people see this going on, the more
are going to be inclined to do so themselves when @emph%they% get
a chance, and the more they're going to be demoralized and
willing to put up with it, and not fight against it when they
encounter it in others.  But conversely, any time we take a stand
against some of ownership because it makes the whole world
poorer, we'll help other people stand up in the future, and we'll
help spread the idea that you should ask not what your country
can do for you, but what you can do for your country.
 
[QUESTIONS]
 
Q: Your talk is very impressive, it's almost like a sermon...
RMS: Yes, it is.  Q: and it's difficult to put all the pieces
together and argue with it, but I find it especially difficult to
see how your alternative system would work, or even exactly how
you imagine it to function.  Let me you this: you didn't mention
music.  You mentioned recipes and other things.  RMS: yes.  Q:
But music is an interesting analog also, with the score; because
the composers have a union, and everything, and they not only---
 
RMS: It supports them very poorly.  Copyright as a way to support
composers or musicians is a @emph%flop%.  We should throw it away
and get something new.  We're the only advanced country that
still relies on that.
 
Q: Well, the question I wanted to ask you---I realize it doesn't
work very well, but they hope that they can get some profit from
the publication of the printed score, but also if a producer of
say, a Broadway show, or a movie maker, makes a big profit by
@emph%performing% the composer's work, then the composer would
like to have a piece of that action too.  And you can make an
analogy between that and a user of software.
 
RMS: You can, and I think in both cases you get problems further
down the line.  See, the nature of knowledge, and information in
general, is to make use of it, you transform it, and mix it in
with other things.  And to try to keep track of how much of a big
program was developed by this author, and how much by this person
and so on, it fundamentally can't be done unless you forbid them
to work together, which is what the current system effectively
does.  It's perfectly possible to keep straight which company
developed something when nothing can ever go from one company to
another.  And that's a tremendous harm.
 
The whole idea of encouraging the development of information
seems plausible because the information is useful.  But in order
for it to be fully useful,  you have to abandon the idea of
trying to keep track of who created it, because any component
could be created in many stages.
 
Now it's true it doesn't do very much harm to anyone if this
Broadway producer pays some money to the composer, assuming that
there was only one composer (of course, there's such a thing as
the folk process, and there's the process of arrangement as
well), but it just happened, I guess, that in music there
wouldn't normally be so many stages of transformation of one work
that it was hard to keep track of.  And part of the reason is
that fundamentally, the value of music is aesthetic, and
therefore originality wasn't imposed simply for the sake of
intellectual property, it was valued for its own sake because
something that was not new was not aesthetically up to
contribution.  A piece that was made by cannibalizing  parts of a
few other pieces with a little bit that was new wouldn't turn
music listeners on very much; they'd just say %%oh, yeah!  Well,
I remember that, I've heard that before in so-and-so's work.''
And in an area where originality has an intrinsic usefulness, you
won't get things being tacked on by one person, and another, and
gradually changed around so much, although in some areas of music
you do---in folk music, that's what happens [originality is not
the main concern in folk music].  And when there are fewer people
changing a work, it becomes less of an odious burden to try to
keep track of who did it, and if you're talking about in
particular, the Broadway producer, well, he's running a big
business anyway, and he can arrange to make a license and so on,
so in that situation it doesn't do very much harm.
 
There's a danger when somebody says that something is wrong with
a significant part of society---there's a certain problem that
you run into, which is that on one side, there are people who
call you a fanatic,  and on the other side there are people who
call you inconsistent.  If you look for every ramification of the
problem you see and demand that they all be completely excised
from society, people call you a fanatic.  And if you don't look
for every ramification and demand that it be excised from
society, people call you inconsistent.
 
What I believe is that no one coordinate patch will map the whole
world very effectively.  There are many phenomena; each
phenomenon is the controlling phenomenon in some areas and
insignificant in others.  I'm concerned with eliminating
intellectual property mainly in the field of software, because
there I see it really uglifying society and causing tremendous
waste.  If it doesn't cause so much waste in the area of music,
then I don't feel it's so important to change it there.
Although, there are certain areas where I object to it, and you
can see the battle is shaping up again because of the ability of
individuals to copy.
 
You may have heard of the proposed laws to tax recorders and tax
tape, and pay the money to record companies, or to musicians, in
proportion to their sales.  Well, I'd be happy to see a tax on
tape or tape recorders to support musicians, but @emph%not% in
proportion to their sales!  If your goal is to help the
struggling musicians (and most musicians are @emph%really%
struggling, because our current copyright system doesn't support
them at all), I'd say that that tax should go to the musicians
who make a @emph%few% sales, but not very many.  Because the ones
who make a lot are rich, and they don't need a handout.
 
Q: I'm not sure of the legal changes you're proposing.  There's
at least three ways in which software can be proprietary.   One
is copyright laws, which you're obviously against.  RMS: yes.  Q:
Another is by entering into a contract: I promise not to copy, I
promise not to disassemble, I promise to be a bad citizen.  The
third is you can use encryption methods, which perhaps our
copyright laws, hardware manufacturers support in the processor
ID [???].  My question is this:  are you proposing to make
entering into certain kinds of contracts illegal, and are you
proposing to make encrypting in order to hoard software illegal?
 
RMS: Well, I haven't seen hardware copy protection schemes that
manage to win.  Encryption, I agree, can prevent you from
changing a program, but I don't see how it can prevent you from
copying it, because you could copy the encrypted thing.  Q: but
you're still avoiding the question... [not true; that was one
half of the question] A: I would say that a nondisclosure
agreement like that should be called unenforceable, like gambling
debts.  Clearly to try to stop people from keeping secrets would
be tyrannical and I wouldn't be in favor of trying to do that.
The other thing to realize is that trade secrecy is not fully
built on those contracts.  Those contracts are one step you go
through to establish something as a trade secret.  But there's an
entire body of trade secret law that imposes things on people who
have not signed those contracts.  So in that area, just as in the
other areas of copyright and patents, there's explicit government
intervention which has nothing to do with voluntary contracts, to
give power to software hoarders, and if that were taken so that
we had nothing but the voluntary contracts, we'd have a lot less
power in trade secrecy than we do now.
 
Q: One other question.  Sometimes you seem very concerned about
the [??] of software.  But when it comes to, for instance,
supporting musicians, you seem to be saying [????]
 
RMS: The public is @emph%already% supporting @emph%those%
musicians, and they will make a lot of money anyway, from their
concerts and so on.  And what I'm saying is that obviously, we
should only have a tax like that if people think it's desirable.
Maybe people think it's desirable to support starting musicians,
and musicians whose lives are marginal but who some people like.
And I think you could set that up in such a way that only a
person who was yearning to be a musician would consider it
attractive, and therefore you wouldn't have to worry about
someone sponging off of it in order to get out of doing any work.
 
Q: While I sympathize with the position you've laid out, it
reminds of the debate between capitalism and communism.  RMS: Oh,
no, it's very different.  I'll explain to you the difference.  Q:
OK, well, the specific point I'd like you to explain then is that
while communism is appealing, it removes some basic human
incentives that are based on self-interest.
 
RMS: There are lots of kinds of self-interest, and what they are
depends on the social situation.  There are also lots of kinds of
competition.  For example, there was competition among hackers in
the old days, for who could do a better program, or could make a
program shorter and faster.  That competition, though, didn't
involve obstruction; yet it motivated people very powerfully, and
you can see in many areas of life where people are motivated by a
wish to excel their rivals, to do better than anyone else had
done.  And they might even spend gigantic amounts trying to do
this.  Have you read about the people who were competing to visit
all the countries in the world first?  They spent incredible
amounts of money trying to do that.  But as for the fundamental
question, communism and capitalism are similar in that they're
very concerned with %%how much money should each person get?''.
Capitalism the position of a person who says %%I want to have the
power to get all the money that my might can bring me'', whereas
communism says everyone should have the same amount of money, or
everybody should have an amount of money that's totally
determined by what that person needs in some sense.  But what I'm
saying is, we all have to pay less attention to how much money
each of us has, because we're impoverishing each other by paying
too much attention to it.  [TAPE ENDS.]
 
                           >> *END* <<
 
(The following was extracted from a public e-mail file and
is reproduced unedited, with the exception of deletion of
multiple lines created by the transmission format--eds.)
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                  * * * * COPYRIGHT LAW ** * *
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
I've received a couple of requests for more information on
copyright law.  A fairly good introduction is included with the
netnews (usenet) software.  Note that some things have changed
since this was written (e.g. copyright notices are no longer
mandatory, penalties for infringement have doubled).
 
One point I think the author should have made is that the basis
for copyright law in the U.S. is constitutional (Art. I Sec. 8):
"The Congress shall have Power ... To promote the Progress of
Science and useful Arts, by securing for limited Times to Authors
and Inventors the exclusive Right to their respective writings
and Discoveries."
 
I did some rather disgusting postprocessing to make nroff output
acceptable to BITNET; this should print properly on a printer
with 66 lines per page and no perforation skip.
 
                                        -=EPS=-
 
 
                           Copyright Law
 
 
                         Jordan J  Breslow
                    1225 Alpine Road  Suite 200
                      Walnut Creek  CA 94596
                           1 415 932 4828
 
 
      I am an attorney practicing copyright law and computer  law.
 I  read  a series of queries in net.legal about copyright law and
 was dismayed to find that people who had no idea what  they  were
 talking  about  were  spreading  misinformation over the network.
 Considering that the penalties for copyright infringement can in-
 clude  $50,000.00  damages  per  infringed  work, attorneys fees,
 court costs, criminal fines  and  imprisonment,  and  considering
 that  ignorance  is  no  excuse and innocent intent is not even a
 recognized defense, I cringe to see the network used as a soapbox
 for the ill-informed.  For that reason, this article will discuss
 copyright law  and  license  law  as  they  pertain  to  computer
 software.
 
      My goal is to enable readers to determine when  they  should
 be  concerned  about infringing and when they can relax about it.
 I also want to let programmers know how to obtain  copyright  for
 their  work.   I'll explain the purpose of software licenses, and
 discuss the effect that the license has on copyright.  For  those
 of  you who are programmers, I'll help you decide whether you own
 the programs you write on the job or your boss owns them.  I will
 also  mention  trademark  law and patent law briefly, in order to
 clarify some confusion about which is  which.   Incidentally,  if
 you read this entire essay, you will be able to determine whether
 or not the essay is copyrighted and whether or not you can make a
 printout of it.
 
      This is a long article, and you may not want to read all  of
 it.   Here is an outline to help you decide what to read and what
 to ignore:
 1.      The Meaning of Copyright from the Viewpoint of the Software User
 1.1     A bit of history
                        copyright
+1.2     The meaning of _________
                        public domain
+1.3     The meaning of ______ ______
 1.4     A hypothetical software purchase
 1.5     Can you use copyrighted software?
 1.6     Can you make a backup copy?
 1.7     Licenses may change the rules
 
+c Copyright 1986 Breslow, Redistributed by permission
 
 
 
 
 1.8     Can you modify the program?
 1.9     Can you break the copy protection scheme?
 1.10    Summary
 
 2.      Copyright Sounds Neat -- How Do I Get One?
         Or, How Do I Know If this Program is Copyrighted?
 2.1     How do you get a copyright?
 2.2     How do you lose a copyright?
 2.3     How do you waste a stamp?
 2.4     Do you have to register?
 2.5     How copyright comes into existence
 2.6     The copyright notice
 2.7     Advantages of registration
 2.8     A test to see if you understand this article
 
 3.      Who Owns The Program You Wrote?
 3.1     Introduction
 3.2     Programs written as an employee
 3.3     Programs written as a contractor
 
 4.      A Brief Word about Licenses
 4.1     Why a license?
 4.2     Is it valid?
 
 5.1     Trademark law explained
 5.2     Patent law
 
 6.      Conclusion
 
 1.  The Meaning of Copyright from the Viewpoint of
     the Software User
 
 1.1.  A bit of history
 
      If you're not interested in history, you can skip this para-
          Modern
+graph.   ______  copyright law first came into existence in 1570,
 by an act of Parliament called the Statute of  Anne.   Like  most
 laws,  it  hasn't  changed much since.  It was written with books
 and pictures in  mind.   Parliament,  lacking  the  foresight  to
 predict  the success of the Intel and IBM corporations, failed to
 consider the issue of copyrighting computer programs.
 
      At first, courts questioned whether programs could be  copy-
 righted  at  all.   The problem was that judges couldn't read the
 programs and they figured the Copyright Law was only meant to ap-
 ply  to things humans (which arguabley includes judges) could read
 without the aid of a machine.  I  saw  some  mythical  discussion
 about  that  in  some of the net.legal drivel.  Let's lay that to
 rest:  programs are copyrightable as long  as  there  is  even  a
 minimal  amount  of  creativity.  The issue was laid to rest with
 the Software Act of 1980.  That Act modified  the  Copyright  Act
 (which  is a Federal law by the way), in such a way as to make it
 clear that programs are copyrightable.   The  few  exceptions  to
 this rule will rarely concern anyone.  The next question to arise
 was whether a program was copyrightable if it was stored  in  ROM
 rather  than  on  paper.    The decision in the Apple v. Franklin
 case laid that to rest:  it is.
 
 1.2.  The meaning of copyright
 
      Now, what is copyright?  As it is commonly understood, it is
 the  right  to make copies of something -- or to put it the other
 way around, it is the right to prohibit other people from  making
 copies.   This  is  known  as an exclusive right -- the exclusive
          reproduce
+right to _________, in the biological language of  the  Copyright
 Act -- and what most people don't know is that copyright involves
 not one, not two, but five exclusive rights. These  are  (1)  the
 exclusive  right  to make copies, (2) the exclusive right to dis-
 tribute copies to the public, (3) the exclusive right to  prepare
 derivative  works
+__________  _____  (I'll explain, just keep reading), (4) the ex-
 clusive right to perform the work in public (this mainly  applies
 to  plays,  dances and the like, but it could apply to software),
 and (5) the exclusive right to display the work in  public  (such
 as showing a film).
 
 1.3.  The meaning of public domain
 
      Before we go any further, what is public domain?  I saw some
 discussion  on  the  net about public domain software being copy-
                                 public domain
+righted.  Nonsense.  The phrase ______ ______, when used correct-
 ly,  means the absence of copyright protection.  It means you can
 copy public domain software to your heart's  content.   It  means
 that  the  author  has none of the exclusive rights listed above.
                            public domain                 freeware
+If someone uses the phrase ______ ______  to  refer  to  ________
 (software which is copyrighted but is distributed without advance
 payment but with a request for a donation), he or  she  is  using
 the term incorrectly.  Public domain means no copyright -- no ex-
 clusive rights.
 
 1.4.  A hypothetical software purchase
 
      Let's look at those exclusive rights from the  viewpoint  of
 someone  who  has legitimately purchased a single copy of a copy-
 righted computer program.  For the moment, we'll have  to  ignore
 the  fact  that  the  program is supposedly licensed, because the
 license changes things.  I'll explain that later.  For  now,  as-
 sume  you  went  to  Fred's  Diner and Software Mart and bought a
 dozen eggs, cat food and a word processing program.  And for now,
 assume the program is copyrighted.
 
 1.5.  Can you use copyrighted software?
 
      What can you do with this copyrighted software?  Let's start
 with  the obvious:  can you use it on your powerful Timex PC?  Is
 this a joke?  No.  Prior to 1980, my answer might have  been  No,
 you can't use it!
 
      People actually pay me for advice like  that!   Well  think:
 you  take the floppy disk out of the zip lock baggy, insert it in
 drive A and load the program into RAM.  What have you just  done?
 You've  made  a copy in RAM -- in legalese, you've reproduced the
 work, in violation of the copyright owner's  exclusive  right  to
 reproduce.  (I better clarify something here:  the copyright own-
 er is the person or company whose name appears in  the  copyright
 notice  on  the box, or the disk or the first screen or wherever.
 It may be the person who wrote the program,  or  it  may  be  his
 boss, or it may be a publishing company that bought the rights to
 the program.  But in any case, it's not you. When you buy a  copy
 of  the program, you do not become the copyright owner.  You just
 own one copy.)
 
      Anyway, loading the program into RAM means  making  a  copy.
 The Software Act of 1980 addressed this absurdity by allowing you
 to make a copy if the copy "is created as an  essential  step  in
 the  utilization  of  the  computer program in conjunction with a
 machine and ...  is used in no other manner ...."   By  the  way,
                        a machine
+somebody  tell me what _ _______ means.  If you connect 5 PC's on
                   a machine    several machines
+a network is that _ _______ or _______ ________?  A related ques-
 tion  is whether or not running software on a network constitutes
 a performance.  The copyright owner has the exclusive right to do
 that, remember?
 
 1.6.  Can you make a backup copy?
 
      OK, so you bought this copyrighted program and you loaded it
 into  RAM  or  onto  a hard disk without the FBI knocking on your
+door.  Now can you make a backup copy?  YES.   The  Software  Act
 also  provided  that you can make a backup copy, provided that it
 "is for archival purposes only ...."  What you cannot do,  howev-
 er,  is give the archive copy to your friend so that you and your
 pal both got the program for the price of one.  That violates the
 copyright  owner's  exclusive  right  to distribute copies to the
 public.  Get it?  You can, on the other hand, give both your ori-
 ginal  and backup to your friend -- or sell it to him, or lend it
 to him, as long as you don't retain a copy of the program you are
 selling.  Although the copyright owner has the exclusive right to
 distribute (sell) copies of the program, that right only  applies
 to the first sale of any particular copy.  By analogy, if you buy
 a copyrighted book, you are free to sell your book to  a  friend.
 The copyright owner does not have the right to control resales.
 
 1.7.  Licenses may change the rules
 
      At this point, let me remind you that we have  assumed  that
 the program you got at the store was sold to you, not licensed to
 you.  Licenses may change the rules.
 
 1.8.  Can you modify the program?
 
      Now, you're a clever programmer, and you  know  the  program
 could  run  faster  with  some  modifications. You could also add
 graphics and an interactive mode and lots of other  stuff.   What
 does  copyright  law say about your plans?  Well ... several dif-
 ferent things, actually.  First, recall that the copyright  owner
 has  the  exclusive right to make derivative works.  A derivative
 work is a work based on one or more preexisting works.  It's easy
 to  recognize  derivative  works  when  you  think about music or
 books.  If a book is copyrighted, derivative works could  include
 a  screenplay, an abridged edition, or a translation into another
 language.  Derivative works of songs might  be  new  arrangements
 (like  the  jazz  version  of  Love  Potion  Number  9),  a movie
                                              long version
+soundtrack, or a written transcription, or a ____ _______,  (such
 as the fifteen minute version of "Wipe Out" with an extended drum
 solo for dance parties).  In my opinion, you are making a deriva-
 tive work when you take the store-bought word processor and modi-
 fy it to perform differently.  The same  would  be  true  if  you
 translated
+__________  a  COBOL program into BASIC.  Those are copyright in-
 fringements -- you've horned in  on  the  copyright  owner's  ex-
 clusive  right to make derivative works.  There is, however, some
                                                             adapt
+breathing room.  The Software Act generously allows you to  _____
 the  code  if  the adaptation "is created as an essential step in
 the utilization of the computer program  in  conjunction  with  a
 machine  ...."  For example, you might have to modify the code to
 make it compatible with your machine.
 
 1.9.  Can you break the copy protection scheme?
 
      Moving right along, let's assume your store  bought  program
 is  copy  protected, and you'd really like to make a backup copy.
 You  know  this  nine-year-old  whiz  who  can  crack  any  copy-
 protection scheme faster than you can rearrange a Rubix cube.  Is
 there a copyright violation if he succeeds?  There's room to  ar-
 gue here. When you try to figure out if something is an infringe-
 ment, ask yourself, what exclusive right am I violating?  In this
 case,  not the right to make copies, and not the right to distri-
 bute copies.  Public performance and display have  no  relevance.
                                                  derivative work
+So  the key question is whether you are making a __________ ____.
 My answer to that question is, "I doubt it."  On the other  hand,
 I  also  doubt that breaking the protection scheme was "an essen-
 tial step" in using the program in conjunction  with  a  machine.
 It  might be a "fair use," but that will have to wait for another
 article.  Anyone interested in stretching the limits of the "fair
                                   Betamax
+use" defense should read the Sony _______ case.
 
 1.10.  Summary
 
      Let me summarize. Copyright means the  copyright  owner  has
 the  exclusive right to do certain things. Copyright infringement
 means you did one of those exclusive things (unless  you  did  it
 within the limits of the Software Act, i.e., as an essential step
 ....).
 
 2.  Copyright Sounds Neat -- How Do I Get One?  Or, How Do I Know
     if this Program is Copyrighted?
 
 2.1.  How do you get a copyright?
 
      If you've written an original program, what do you  have  to
 do to get a copyright? Nothing. You already have one.
 
 2.2.  How do you lose a copyright?
 
      If you've written an original program, what do you  have  to
 do  to  lose your copyright protection?  Give copies away without
 the copyright notice.
 
 2.3.  How do you waste a stamp?
 
      If you mail the program to yourself in  a  sealed  envelope,
 what have you accomplished? You've wasted a stamp and an envelope
 and burdened the postal system unnecessarily.
 
 2.4.  Do you have to register?
 
      Do you have to register your program with the U.S. Copyright
 Office?  No, but it's a damn good idea.
 
 2.5.  How copyright comes into existence
 
      Copyright protection (meaning  the  five  exclusive  rights)
                                      fix                   tangi-
+comes  into existence the moment you ___ your program in a ______
 ble medium
+___ ______.  That means write it down, or store it  on  a  floppy
 disk,  or  do  something similar.  Registration is optional.  The
 one thing you must do, however, is protect your copyright by  in-
 cluding  a  copyright  notice  on every copy of every program you
 sell, give away, lend out, etc.  If you don't, someone  who  hap-
 pens  across  your program with no notice on it can safely assume
 that it is in the public domain (unless he actually knows that it
 is not).
 
 2.6.  The copyright notice
 
   The copyright notice has three parts. The first can be ei-
ther a c with a circle around it (c), or the word Copyright or
 the abbreviation Copr. The c with a circle around it is prefer-
 able, because it is recognized around the world; the others are
 not. That's incredibly important. Countries around the world
 have agreed to recognize and uphold each others' copyrights, but
 this world-wide protection requires the use of the c in a circle.
 On  disk  labels and program packaging, use the encircled c.  Un-
 fortunately, computers don't draw small circles well, so program-
 mers  have  resorted  to a c in parentheses: (c).  Too bad.  That
 has no legal meaning.  When you put your notice in the  code  and
 on  the  screen, use Copyright or Copr.  if you can't make a cir-
 cle.
 
      The second part of the notice is the "year of first publica-
                      Publication
+tion  of  the work." ___________ doesn't mean distribution by Os-
 borne Publishing Co.  It means distribution of copies of the pro-
 gram to the public "by sale or other transfer of ownership, or by
 rental, lease, or lending."  So when you  start  handing  out  or
 selling copies of your precious code, you are publishing.  Publi-
 cation also takes place  when  you  merely  OFFER  to  distribute
 copies to a group for further distribution.  Your notice must in-
 clude the year that you first did so.
 
      The third part of the notice is the name of the owner of the
 copyright.   Hopefully,  that's you, in which case your last name
 will do.  If your company owns the program -- a legal issue which
 I  will  address later in this article -- the company name is ap-
 propriate.
 
      Where do you put the notice?  The general idea is to put  it
 where  people  are likely to see it. Specifically, if you're dis-
 tributing a human-readable code listing, put it on the first page
 in  the  first few lines of code, and hard code it so that it ap-
 pears on the title screen, or at sign-off, or  continuously.   If
 you're distributing machine-readable versions only, hard code it.
 As an extra precaution, you should also place the notice  on  the
 gummed  disk  label or in some other fashion permanently attached
 to the storage medium.
 
 2.7.  Advantages of registration
 
      Now, why register the program?  If no one ever rips off your
 program, you won't care much about registration.  If someone does
 rip it off, you'll kick yourself for not  having  registered  it.
 The  reason  is  that if the program is registered before the in-
 fringement takes place, you can recover some big bucks  from  the
 infringer,  called statutory damages, and the court can order the
 infringer to pay your attorneys fees.   Registration  only  costs
 $10.00,  and it's easy to do yourself.  The only potential disad-
 vantage is the requirement that you deposit the first and last 25
 pages  of  your  source  code,  which  can  be inspected (but not
 copied) by members of the public.
 
 2.8.  A test to see if you understand this article
 
      Now, someone tell me this:   is  this  article  copyrighted?
 Can you print it?
 
 3.  Who Owns The Program You Wrote?
 
 3.1.  Introduction
 
      The starting point of this analysis is that if you wrote the
 program, you are the author, and copyright belongs to the author.
 HOWEVER, that can change instantly. There are two common ways for
 your  ownership  to  shift  to someone else:  first, your program
 might be a "work for hire."  Second, you  might  sell  or  assign
 
       rights
+your  ______  in  the  program,  which for our purposes means the
 copyright.
 
 3.2.  Programs written as an employee
 
      Most of the programs which you write at work, if not all  of
 them,  belong to your employer. That's because a program prepared
 by an employee within the scope of his or  her  employment  is  a
                                                     author
+"work for hire," and the employer is considered the ______.  This
 is more or less automatic if you are an employee  --  no  written
 agreement is necessary to make your employer the copyright owner.
 By contrast, if you can convince your employer to let you be  the
 copyright owner, you must have that agreement in writing.
 
      By the way, before you give up hope of owning the  copyright
 to the program you wrote at work, figure out if you are really an
 employee.  That is actually a complex legal question, but  I  can
 tell you now that just because your boss says you are an employee
 doesn't mean that it's so.  And remember that if you created  the
                     scope
+program outside the _____ of your job, the program is not a "work
 for hire."  Finally, in California and  probably  elsewhere,  the
 state  labor law provides that employees own products they create
 on their own time, using their own tools and  materials.  Employ-
 ment  contracts  which  attempt to make the employer the owner of
                   inventions
+those off-the-job __________ are void, at least in sunny Califor-
 nia.
 
 3.3.  Programs written as a contractor
 
      Wait a minute:  I'm an independent contractor to Company  X,
 not an employee.  I come and go as I please, get paid by the hour
 with no tax withheld, and was retained  to  complete  a  specific
 project.   I  frequently  work at home with my own equipment.  Is
 the program I'm writing a "work for hire," owned by the  Company?
 Maybe,  maybe not.  In California, this area is full of landmines
 for employers, and gold for contractors.
 
      A contractor's program is not a "work for hire," and is  not
 owned  by  the  company,  unless (1) there is a written agreement
 between the company and the contractor which says that it is, and
                    commissioned work     commissioned work
+(2)  the work is a ____________ ____.  A ____________ ____ is one
                                             collective work
+of the following:  (a)  a contribution to a __________ ____,  (b)
 an  audiovisual work (like a movie, and maybe like a video game),
 (c) a translation, (d) a compilation, (e) an instructional  text,
 (f) a test or answer to a test, or (g) an atlas.  I know you must
 be tired of definitions, but this is what the real legal world is
 made  of.   An example of a  collective work is a book of poetry,
 with poems contributed by various authors.  A piece of code which
 is  incorporated  into  a large program isn't a contribution to a
 collective work, but a stand-alone program which is packaged  and
 sold with other stand-alone programs could be.
 
      So where are we?  If you are a contract programmer,  not  an
                                 commissioned work
+employee, and your program is a ____________ ____, and you have a
 
 written agreement that says that the program is a "work for hire"
 owned by the greedy company, who owns the program?  That's right,
 the company.  But guess what?  In California  and  elsewhere  the
 company  just  became your employer!  This means that the company
+must now provide worker's compensation benefits for you AND UNEM-
 PLOYMENT INSURANCE
 
 4.  A Brief Word About Licenses.
 
 4.1.  Why a license?
 
      When you get software  at  the  local  five  and  dime,  the
 manufacturer  claims  that you have a license to use that copy of
 the program.  The reason for this is that the manufacturer  wants
 to  place more restrictions on your use of the program than copy-
 right law places.  For example, licenses typically  say  you  can
 only  use the program on a single designated CPU.  Nothing in the
 copyright law says that.  Some licenses say you  cannot  make  an
 archive  copy.  The copyright law says you can, remember?  But if
 the license is a valid license, now you can't.  You can  sell  or
 give  away  your  copy  of  a program if you purchased it, right?
 That's permitted by copyright law, but the license  may  prohibit
 it.  The more restrictive terms of the license will apply instead
 of the more liberal copyright rules.
 
 4.2.  Is it valid?
 
      Is the license valid?  This is hotly debated among  lawyers.
 (What  isn't?   We'll argue about the time of day.)  A few states
 have passed or will soon pass laws declaring that they are valid.
 A  few  will  go the other way.  Federal legislation is unlikely.
 My argument is that at the consumer level,  the  license  is  not
 binding  because there is no true negotiation (unless a state law
 says it is binding), but hey that's just an argument and I'm  not
 saying  that  that's  the  law.   In any case, I think businesses
 which buy software will be treated differently in court than con-
 sumers.  Businesses should read those licenses and negotiate with
 the manufacturer if the terms are unacceptable.
 
 5.  I Have A Neat Idea. Can I Trademark It?  What About patent?
 
 5.1.  Trademark law explained
 
      Sorry, no luck.  Trademark law  protects  names:   names  of
 products  and  names of services.  (Note that I did not say names
 of companies.  Company names are not trademarkable.)  If you  buy
 a program that has a trademarked name, all that means is that you
 can't sell your own similar program under the same name.  It  has
 nothing to do with copying the program.
 
 5.2.  Patent Law
 
      Patent law can apply to computer  programs,  but  it  seldom
 does.   The  main  reasons  it seldom applies are practical:  the
 patent process is too slow and too expensive to do much  good  in
 the software world.  There are also considerable legal hurdles to
 overcome in order to obtain a patent.  If, by chance,  a  program
 is  patented,  the  patent owner has the exclusive right to make,
 use or sell it for 17 years.
 
 6.  CONCLUSION
 
      I know this is a long article, but believe it or not I  just
 scratched  the  surface.  Hopefully, you'll find this information
 useful, and you'll stop passing along myths about copyright  law.
 If anyone needs more information, I can be reached at the address
 on the first page.  Sorry, but I do not usually  have  access  to
 the network, so you can't reach me there.
 
 Thank you.  JORDAN J. BRESLOW
 
                           >> *END* <<
 
(The following is reprinted from public e-mail sources--eds.)
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
         -- Computer Law - State of Wisconsin Statute --
                    Chapter 293, Laws of 1981
                     943.70 Computer crimes.
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
(1) DEFINITIONS. In this section:
 
   (a) "Computer" means an electronic device that performs
       logical, arithmetic and memory functions by manipulating
       electronic or magnetic impulses, and includes all input,
       output, processing, storage, computer software and
       communication facilities that are connected or related to
       a computer in a computer system or computer network.
 
   (b) "Computer network" means the interconnection of
       communication lines with a computer through remote
       terminals or a complex consisting of 2 or more
       interconnected computers.
 
   (c) "Computer program" means an ordered set of instructions or
       statements that, when executed by a computer, causes the
       computer to process data.
 
   (d) "Computer software" means a set of computer programs,
       procedures or associated documentation used in the
       operation of a computer system.
 
   (dm) "Computer supplies" means punchcards, paper tape,
       magnetic tape, disk packs, diskettes and computer output,
       including paper and microform.
 
   (e) "Computer system" means a set of related computer
       equipment, hardware or software.
 
   (f) "Data" means a representation of information, knowledge,
       facts, concepts or instructions that has been prepared or
       is being prepared in a formalized manner and has been
       processed, is being processed or is intended to be
       processed in a computer system or computer network. Data
       may be in any form including computer printouts, magnetic
       storage media, punched cards and as stored in the memory
       of the computer. Data are property.
 
   (g) "Financial instrument" includes any check, draft, warrant,
       money order, note, certificate of deposit, letter of
       credit, bill of exchange, credit or credit card,
       transaction authorization mechanism, marketable security
       and any computer representation of them.
 
   (h) "Property" means anything of value, including but not
       limited to financial instruments, information,
       electronically produced data, computer software and
       computer programs.
 
   (i) "Supporting documentation" means all documentation used in
       the computer system in the construction, clarification,
       implementation, use or modification of  the software or
       data.
 
(2) OFFENSES AGAINST COMPUTER DATA AND PROGRAMS.
 
   (a) Whoever willfully, knowingly and without authorization
       does any of the following may be penalized as provided in
       par. (b):
 
   1.  Modifies data, computer programs or supporting
       documentation.
 
   2.  Destroys data, computer programs or supporting
       documentation.
 
   3.  Accesses data, computer programs or supporting
       documentation.
 
   4.  Takes possession of data, computer programs or supporting
       documentation.
 
   5.  Copies data, computer programs or supporting
       documentation.
 
   6.  Discloses restricted access codes or other restricted
       access information to unauthorized person.
 
   (b) Whoever violates this subsection is guilty of:
 
   1.  A Class A misdemeanor unless subd. 2, 3 or 4 applies.
 
   2.  A Class E felony if the offense is committed to defraud or
       to obtain property.
 
   3.  A Class D felony if the damage is greater than $2,500 or
       if it causes an interruption or impairment of governmental
       operations or public communication, of transportation or
       of a supply of water, gas or other public service.
 
   4.  A Class C felony if the offense creates a situation of
       unreasonable risk and high probability of death or great
       bodily harm to another.
 
 
(3) OFFENSES AGAINST COMPUTERS, COMPUTER EQUIPMENT OR SUPPLIES.
 
   (a) Whoever willingly, knowingly and without authorization
       does any of the following may be penalized as provided in
       par. (b):
 
   1.  Modifies computer equipment or supplies that are used or
       intended to be used in a computer, computer system or
       computer network.
 
   2.  Destroys, uses, takes or damages a computer, computer
       system, computer, network or equipment or supplies used or
       intended to be used in a computer, computer system, or
       computer network.
 
   (b) Whoever violates this subsection is guilty of:
 
   1.  A Class A misdemeanor unless sub. 2,3 or 4 applies.
 
   2. A Class E felony if the offense is committed to defraud or
       obtain property.
 
   3.  A Class D felony if the damage to the computer, computer
       system, computer network, equipment or supplies is greater
       than $2,500.
 
   4.  A Class C felony if the offense creates a situation of
       unreasonable risk and high probability of death or great
       bodily harm to another.
 
                 -- Penalties for Infractions --
 
939.50(3) Penalties for felonies are as follows:
 
   (a) For a Class A felony, life imprisonment.
 
   (b) For a Class B felony, imprisonment not to exceed 20 years.
 
   (c) For a Class C felony, a fine not to exceed $10,000 or
       imprisonment not to exceed 10 year, or both.
 
   (d) For a Class D felony, a fine not to exceed $10,000 or
       imprisonment not to exceed 5 year, or both.
 
   (e) For a Class E felony, a fine not to exceed $10,000 or
       imprisonment not to exceed 2 year, or both.
 
939.51(3) Penalties for misdemeanors are as follows:
 
   (a) For a Class A misdemeanor, a fine not to exceed $10,000 or
       imprisonment not to exceed 9 months, or both.
 
   (b) For a Class B misdemeanor, a fine not to exceed $1,000 or
       imprisonment not to exceed 90 days, or both.
 
   (c) For a Class C misdemeanor, a fine not to exceed $500 or
       imprisonment not to exceed 30 days, or both.
 
                           >> *END* <<
 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
              * * * * PIRATE EDITORIAL, by  * * * *
                       (by Mikey Mouse)
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
               BIG BROTHER IN OUR COMPUTER ROOM???
 
Rumour has it that this August, legislation will go
into effect making it a criminal offense to send or recieve
electronic porn through the phones, if it crosses state lines.
According to this rumour, the user need not know that the graphic
was porno (which is defined as any nudity).  Breaking this law
three or more times will constitute doing so for business
purposes, subjection the violator to confiscation of all involved
computer equipment.
 
Leave aside for now that on the surface this wouldn't seem to
affect a board such as this one, that perpetrators will likely
outnumber enforcers by several orders of magnitude, and that 15
year olds (the median age of techno-pervs) are notoriously
difficult to prosecute.  If true, this rumour has some disturbing
implications.
 
First, it points to the solidification of the legislative concept
of the electronic community as a genuine entity - almost a 'sixth
estate', when we have thrived for so long in large part due the a
BBS is.  If it can't vote or be taxed ...
 
Second, it brings BBS's under the scrutiny of a group that many
find far scarier that congress, the FBI, or even the KGB - that's
right, the Fallwellians.  These morality police have clearly
established that they have determination, large numbers of
followers, and, of course, no morals.  If they also develop
sufficient intelligence (well, it MIGHT happen!) to realize that,
while they can't picket a BBS, they can turn them in to the Feds,
and badger the Feds into action, the result could be an onslaught
of M.O.R.O.N.S  (Moral Opposition to Rot Of Naughty Smut) and
FATheads (Falwell Attack Team) infiltrating the PD, and then the
PI boards.
 
Seriously, though - if this does happen, it will provide one more
reason for authorities to investigate the contents of BBS's in
general, something that won't be good for anyone.  This rumour
rings true to me - it's just the sort of thing our increasingly
Fundamentalist legislature would pass.  I'm going to ask around
on CIS about this, since their PBW area would be affected.  If
anyone else has info about this, I'd like to hear it.
 
  (Eds note: To contact MB, call GREAT ESCAPE (312-535-2761) and
             leave a note to "ALL")
 
                           >> *END* <<
 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
      * * SYSOPS CORNER: WHAT'S GOIN ON AT GREAT ESCAPE * *
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
PC Board 14.1/E3 is now running.  There are going to be a lot of
new changes made in the next few weeks for the system.  The board
is going to run Emulex/2 as a PCR/Point door for files and
messages for all members.  In addition, ELITE members who have
remained faithful to the board in support will also have full
access to the PCBoard/Prodoor Batch system and will have FREE
file downloading and unlimited daily time privileges granted to
them.  Except for ELITE members, all users will only have access
to the new door for transfers and messages.  Users who don't keep
up their share of BOTH posted messages and files will recieve the
lowest access.  We expect to have Node#2 ready and running at
2400 baud by early August 89' so until then, 1200 Baud is no
longer supported by this system.  Don't be so cheap, get a 2400
or 9600 modem now... We may even come up under a new
system,location and phone number TBA...
 
We are now offering file points for credit to all current board
members who post 2-3 messages per logon.  These messages must be
useful and placed in their correct conference.  Only messages
pretaining to the subject matter of the conference are
considered, no advertisements!  I recommend that each message
post be informative and more than just 1 or 2 lines.  Yes, we are
very serious.  This offer stands and will be honored!
 
I'm happy to report that the new code of PC Board 14.1 now
supports all File compression formats including .ARC, .PAK, .ZIP,
LZH and many others As soon as we get a new version of ProDOOR
later than our 2.9 version, also supports these, we will allow
all formats on this board for transfer as well as file viewing
and extracting.  The new code also directly supports EMS and
34800 Baud Rates with v.32 and v.42 functions.
 
The new USR 9600 HST gets 19,200 baud Connect on PCBoard using
old and new serial chip technology under DOS with up to 26,100
throughput using MNP Class 5 Data compression and error control.
We now, of course, support YMODEM-G (Registered DSZ) MNP-5
transfers for best results.
 
We will NO LONGER be supporting users of 1200 BAUD MODEMS OR
CONNECTS.  So if you have been connecting at 1200 thru PCP or
using a 1200 baud modem, (Don't be so cheap, get a 2400 now...),
you will be outta luck.  In 2 years of operation, I'd say we have
only had 2 or 3 users ever contribute regulary at 1200, so it
seems we would be wasting our's and your time with it.  Even 2400
is slow but it's standard, so we have to support it for awhile.
Next week, ALL 1200 callers will find a reduction in daily time
or no time.  New Users at 1200 baud will be denied access.  All
users using 4800 Baud modems or connects and above may get better
access time and daily K than 2400 users.
 
Added several PC Pursuit Zmodem Transmit Varients for diehard
Pursuit users, try them for better performance on your next PCP
DSZ download.  SuperK Batch protocols are added for Jmodem,
Super8K, and K9Xmodem batch upload and downloading -Not tested-,
BATCH TRANSFERS are mainly for REGULAR or ELITE users.  Still
hoping to get BI-Modem going next week.  Watch for some new DOORS
coming next month.  Possible Point-System Board Door running
Emulex/2 also...
 
NEW Private USERS are mainly allowed to download our GELIST.ZIP
filelist.  Bulletins show what we are looking for and good
uploads get fastest access We have no time or energy to waste on
anything else...NO DONATIONS, sorry.
                         - - - - - - - -
(If you're a sysop and want to sound off, hype your board,
or need some info, contact us--eds.)
 
                           >> *END* <<
 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
                  * * * * WANTS AND NEEDS * * *
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
This section will cover specialized want lists, so if you have
a program to swap or are looking for one, here's where to
announce it.
                           >> *END* <<
 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
        MONTHLY REVIEW:  THE GREAT ESCAPE (312-535-2761)
                          By -=*JEDI*=-
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
How do ya review a pirate board? They ain't got no plot, popcorn,
or 14 year old nymphettes to ogle. And if ya review one you're on
and the sysop don't like it, off ya goes, and if the sysop's a
buddy, then the review's gotta be good. So, I says, why not do
THE GREAT ESCAPE?  Might as well jump into the fray and piss off
everyone. So, here goes.
 
GREAT ESCAPE's a pretty cool board. In fact, guess it's one of
the top 10 in the U.S. Has about half a gig of latest top line
warez and not a lot of garbage. Nice thing about it is how it's
laid out....files are organized into 3 main conferences, and each
conference is subdivided into specialty areas. The newcomers'
conference has enough stuff to keep novices happy and give them a
chance to prove themselves.  The Entertainment conference, for
gamerz, is subdivided into a bunch of areas depending on kinds of
games ya like, and most of the stuff is cracked.  The Business
conference is the most impressive, and has 14 areas, divided up
into stuff like desktop publishing, telecomm, and the rest.
 
Neatest thing about GREAT ESCAPE is that you can be pretty sure
that the stuff will work. Maxx Cougar, the head czar and
some-time despot, tests each one out before it goes up. If
there's a problem, he yanks it. If the uploader just made a
mistake, only a whipping happens. Sometimes mistakes happen, and
if there's a problem with a program, the sysop(s) will get ahold
of the original uploader or somebody else is around to make it
right. There's no lame stuff, and files are nearly always
complete, directly copied from original disks.
Lamerz are kicked off immediately, though, so be forewarned.
 
Biggest problem is that most of the stuff is off-line to save
space. To get it, ya have to request it from the sysops. This can
be a drag, 'cause sometimes they forget, but if ya keeps at 'em,
they'll get the requested files up. Guess this is ok, though,
'cause it keeps room for newer stuff.  Sysops don't take much
shit, which is good, and if ya screw up an upload, be prepared
for some public scolding.
 
GE's pretty popular, so it's pretty hard to get on. Ya also have
to prove yourself before higher access is given. Seems like the
trick is to upload quality stuff over a period of time, don't be
a jerk, post some good info in the message section, and you'll be
ok.
 
Users are mostly pretty cool. There's too many message
conferences to count on my fingers, and seems there's always
somebody around who can answer questions. One neat thing is ya
gets credit for posting messages, but they're supposed to be
intelligent messages, but ya don't have to use big words, which I
kinda like.
 
On a 10 point scale, comparing with other top boards, guess my
rating would be
        Warez       = 9.5
        Users       = 8
        Messages    = 8
        Sysops      = 9.5
        Ease of use = 9
        --------------
 
                           >> *END* <<
 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
           * * * * SOME OF OUR FAVORITE BOARDZ * * * *
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
206-255-1282  ETHEREAL DIMENSION         LARGEST IN NORTHWEST
212-519-1791  THE RUNNING BOARD BBS
217-328-8181  THETA-SIGMA                3/12/24  ASK FOR IBMP NODE
301-384-2938  GATES OF DAWN              FIRM DIST. BOARD - NAPPA #1
303-431-2931  KILLER FAJETAS FROM HELL   150 FREE MEGS
303-969-8195  THE DISCORDIAN SOCIETY     12/2400 RUNNING PCBOARD
312-282-9279  SKI LODGE                  RBBS
312-297-5385  GAMERS GALAXY              GOOD BBS
312-385-2764  SHADE-TREE, BBS            P/D - S/W AND CONFERENCES
312-390-6594  DEFENDER                   PCBD
312-426-8228  THE SHOP                   RUNNING PC-BOARD - BACKROOM
312-481-2130  WASTELANDS BBS             3/12/2400 RUNNING PCBOARD
312-509-1816  DARK SIDE                  MONARCH
312-582-9249  FRONT LINE                 FORM
312-699-6353  GRAVEYARD                  FORM
312-749-8139  WAR ZONE                   TAG
312-756-2023  THE JOUSTING FIELDS        SPECTRUM 2.1C - 42 MEGS
312-831-0456  FERS CENTRAL               1200-2400/SBBS
312-991-4639  WILD WEST                  MONARCH
404-921-4635  SUNBANE ELITE BBS          12/24/9600 135+ MGS, EMULEX
404-923-3870  THE DUCK ELITE BBS         12/2400 RUNNING PCBOARD
408-251-4689  THE PUBB BBS               3/12/2400 RUNNING EMULEX/2
408-268-6692  CITY OF THIEVES            3/12/2400 RUNNING PCBOARD
416-467-6387  EUPHORIA                   160 MEGS - FIRM DIST. #1 -
703-971-7874  CORNERSTONE BBS            THE FIRM
716-636-4540  PLUTONIUM MINES            160 MEGS - VGA GIFS! - PTL -
719-260-8472  PLAYDO LAND I              3/12/2400 RUNNING SYS-PC 2.7
801-485-7646  BESERKER BBS               12/2400 RUNNING PC BOARD
804-451-3551  THE MAGE'S LAIR            3/12/2400 RUNNING PCBOARD
815-895-5573  SYCAMORE ELITE             OPUS (RESTRICTED)
 
If you have the names and numbers of elite boards, pass them
along.
 
                           >> *END* <<
 
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
Well, we ran out of room. With luck, PIRATE will appear
bi-monthly, but we'll see how it goes. Best way to contact us
is through the home board. If you have any suggestions, or if
there's something you would like to see covered, let us know, or
better yet, write it up and call it in.
  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 
 
 ------------------
COMING NEXT ISSUE:
 *More on computer law
 *Viruses
 *Board of the Month
 *And more. . .
 ------------------
 
         //////////////////////////////////////////////
        /                                            /
       /                END Vol. I, No. 1           /
      /                                            /
     //////////////////////////////////////////////

